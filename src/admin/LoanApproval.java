/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import config.Session;
import config.dbConnector;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author milan
 */
public class LoanApproval extends javax.swing.JFrame {

    /**
     * Creates new form LoanApproval
     */
    public LoanApproval() {
        initComponents();
        
         loadPendingLoans();
    }
    
    public void loadPendingLoans() {
    DefaultTableModel model = (DefaultTableModel) loantbl.getModel();
    model.setRowCount(0); // clear

    try {
        dbConnector dbc = new dbConnector();
        String sql = "SELECT * FROM tbl_loans WHERE loan_status = 'Pending'";
        try (Connection conn = dbc.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("loan_id"),
                    rs.getString("u_username"),
                    rs.getDouble("loan_amount"),
                    rs.getString("loan_description"),
                    rs.getTimestamp("loan_date"),
                    rs.getString("loan_status")
                });
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}

    public class LoanStatus {
    public static final String PENDING = "PENDING";
    public static final String PAID = "PAID";
    public static final String REJECTED = "REJECTED";
}
     public void logEvent(int userId, String username, String description) {
    dbConnector dbc = new dbConnector();
    Connection con = dbc.getConnection();
    PreparedStatement pstmt = null;

    try {
        // Fixed: include `log_description` in your INSERT
        String sql = "INSERT INTO tbl_log (u_id, u_username, login_time, u_type, log_status, log_description) VALUES (?, ?, ?, ?, ?, ?)";
        pstmt = con.prepareStatement(sql);

        pstmt.setInt(1, userId);
        pstmt.setString(2, username);
        pstmt.setTimestamp(3, new Timestamp(new Date().getTime())); 
        pstmt.setString(4, "Success - User Action"); 
        pstmt.setString(5, "Active"); 
        pstmt.setString(6, description);

        pstmt.executeUpdate();
        System.out.println("Log event recorded successfully.");
    } catch (SQLException e) {
        System.out.println("Error recording log: " + e.getMessage());
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + e.getMessage());
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        cancel1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loantbl = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        cancel1.setBackground(new java.awt.Color(255, 255, 255));
        cancel1.setFont(new java.awt.Font("Yu Gothic UI", 1, 12)); // NOI18N
        cancel1.setForeground(new java.awt.Color(27, 57, 77));
        cancel1.setText("Cancel");
        cancel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancel1MouseClicked(evt);
            }
        });
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(531, Short.MAX_VALUE)
                .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 590));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 3, 36)); // NOI18N
        jLabel1.setText("LOAN REQUEST APPROVAL");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, -1, -1));

        loantbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Loan ID", "Username", "Loan Amount", "Description", "Date", "Status"
            }
        ));
        jScrollPane1.setViewportView(loantbl);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, 590, 400));

        jButton1.setText("Approve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, -1, -1));

        jButton2.setText("Reject");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 80, -1));

        area.setColumns(20);
        area.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        area.setRows(5);
        jScrollPane2.setViewportView(area);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 270, 240, 230));

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Reset");
        jButton4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 510, 80, 40));

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Print Receipt");
        jButton5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 510, 70, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
int selectedRow = loantbl.getSelectedRow();
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(null, "Please select a loan request to approve.");
    return;
}

int loanId = (int) loantbl.getValueAt(selectedRow, 0); // Loan ID column
String username = loantbl.getValueAt(selectedRow, 1).toString(); // Username column
String loanAmountStr = loantbl.getValueAt(selectedRow, 2).toString(); // Loan Amount column
double loanAmount = Double.parseDouble(loanAmountStr); // Convert loan amount to double
String currentStatus = loantbl.getValueAt(selectedRow, 3).toString(); // Loan Status column

// Check if the loan is already approved or rejected
if ("APPROVED".equals(currentStatus) || "REJECTED".equals(currentStatus)) {
    JOptionPane.showMessageDialog(null, "This loan has already been processed.");
    return;
}

// Get admin session details
Session sess = Session.getInstance();
int adminId = sess.getUid();
String adminUsername = sess.getUsername();

if (adminId == -1) {
    JOptionPane.showMessageDialog(null, "Admin not logged in!", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

Connection conn = null;
PreparedStatement pstLoanUpdate = null;
PreparedStatement pstBalanceUpdate = null;

try {
    dbConnector dbc = new dbConnector();
    conn = dbc.getConnection();
    conn.setAutoCommit(false); // Start transaction

    // 1. Update loan status to APPROVED
    String sqlLoanUpdate = "UPDATE tbl_loans SET loan_status = 'APPROVED' WHERE loan_id = ? AND loan_status = 'PENDING'";
    pstLoanUpdate = conn.prepareStatement(sqlLoanUpdate);
    pstLoanUpdate.setInt(1, loanId);
    int loanUpdateResult = pstLoanUpdate.executeUpdate();

    // Check if loan update was successful
    if (loanUpdateResult > 0) {
        // 2. Get user's current balance
        String getBalanceQuery = "SELECT balance FROM tbl_users WHERE u_username = ?";
        pstBalanceUpdate = conn.prepareStatement(getBalanceQuery);
        pstBalanceUpdate.setString(1, username);
        ResultSet rsBalance = pstBalanceUpdate.executeQuery();

        double currentBalance = 0.0;
        if (rsBalance.next()) {
            currentBalance = rsBalance.getDouble("balance");
            System.out.println("Current balance for " + username + ": " + currentBalance);  // Debugging line
        } else {
            JOptionPane.showMessageDialog(null, "User not found!");
            return;
        }

        // 3. Update user's balance by ADDING loan amount
        double newBalance = currentBalance + loanAmount;  // Add loan amount to current balance
        System.out.println("New balance after loan: " + newBalance);  // Debugging line
        
        String updateBalanceQuery = "UPDATE tbl_users SET balance = ? WHERE u_username = ?";
        pstBalanceUpdate = conn.prepareStatement(updateBalanceQuery);
        pstBalanceUpdate.setDouble(1, newBalance);
        pstBalanceUpdate.setString(2, username);
        int balanceUpdateResult = pstBalanceUpdate.executeUpdate();

        // If both operations succeed, commit the transaction
        if (balanceUpdateResult > 0) {
            conn.commit(); // Commit the transaction
            JOptionPane.showMessageDialog(null, "Loan Approved and Balance Updated.");

            // Log the approval
            String description = "Admin approved Loan ID: " + loanId + " for user " + username;
            logEvent(adminId, adminUsername, description);

            // Refresh the table with the updated loan statuses
            loadPendingLoans();

            // Generate a receipt
            area.setText(""); // Clear previous content
            area.append("*********************************************\n");
            area.append("*        Jakie Loan's Receipt System        *\n");
            area.append("*********************************************\n\n");
            Date date = new Date();
            area.append(date.toString() + "\n\n");
            area.append("User's Username: " + username + "\n");
            area.append("Loan's Amount: " + loanAmount + "\n");

        } else {
            conn.rollback(); // Rollback transaction if balance update fails
            JOptionPane.showMessageDialog(null, "Error updating user balance.");
        }
    } else {
        conn.rollback(); // Rollback transaction if loan update fails
        JOptionPane.showMessageDialog(null, "Loan approval failed. Loan may not be in pending status.");
    }

} catch (Exception e) {
    if (conn != null) {
        try {
            conn.rollback(); // Rollback the transaction in case of error
        } catch (SQLException sqlEx) {
            JOptionPane.showMessageDialog(null, "Error rolling back transaction: " + sqlEx.getMessage());
        }
    }
    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
} finally {
    try {
        if (pstLoanUpdate != null) pstLoanUpdate.close();
        if (pstBalanceUpdate != null) pstBalanceUpdate.close();
        if (conn != null) conn.close(); // Close the connection
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error closing resources: " + e.getMessage());
    }
}


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
  jButton2.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = loantbl.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a loan request to reject.");
            return;
        }

        int loanId = (int) loantbl.getValueAt(selectedRow, 0); // Column 0 is Loan ID

        // Get admin session details
        Session sess = Session.getInstance();
        int adminId = sess.getUid();
        String adminUsername = sess.getUsername();

        // Validate admin session
        if (adminId == -1) {
            JOptionPane.showMessageDialog(null, "Admin not logged in!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            dbConnector dbc = new dbConnector();
            String sql = "UPDATE tbl_loans SET loan_status = 'Rejected' WHERE loan_id = ?";
            try (Connection conn = dbc.getConnection();
                 PreparedStatement pst = conn.prepareStatement(sql)) {
                pst.setInt(1, loanId);
                int result = pst.executeUpdate();

                if (result > 0) {
                    JOptionPane.showMessageDialog(null, "Loan Rejected.");

                    // Log the rejection
                    String description = "Admin rejected Loan ID: " + loanId;
                    logEvent(adminId, adminUsername, description);

                    loadPendingLoans(); // refresh table
                } else {
                    JOptionPane.showMessageDialog(null, "Loan rejection failed.");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }
});
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       // area.setText("");
        //username.setText("");
        //loanamount.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try{
            area.print();
        }catch(Exception e){
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void cancel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cancel1MouseClicked

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed

        Admindashboard ru = new Admindashboard();
        ru.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cancel1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoanApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoanApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoanApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoanApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoanApproval().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea area;
    public javax.swing.JButton cancel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public javax.swing.JButton jButton4;
    public javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable loantbl;
    // End of variables declaration//GEN-END:variables
}
